# -*- coding: utf-8 -*-
"""Face_Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x-QZwTXVRE8w_nq3j0Qia_hwwGKnReL2

# ***Install Face Recognition Library***
"""

pip install face_recognition

"""# ***Training***"""

from imutils import paths
import face_recognition
import pickle
import cv2
import os

print("quantifying faces...")
imagePaths = list(paths.list_images('/content/drive/My Drive/My Project/Face Recognition/DatasetFinal'))

knownEncodings = []
knownNames = []

for (i, imagePath) in enumerate(imagePaths):
	print("processing image {}/{}".format(i + 1,
		len(imagePaths)))
	name = imagePath.split(os.path.sep)[-2]

	image = cv2.imread(imagePath)
	rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
	boxes = face_recognition.face_locations(rgb,
		model="cnn")
	encodings = face_recognition.face_encodings(rgb, boxes)
	for encoding in encodings:
		knownEncodings.append(encoding)
		knownNames.append(name)

print("[INFO] serializing encodings...")
data = {"encodings": knownEncodings, "names": knownNames}
f = open('/content/drive/My Drive/My Project/Face Recognition/output/lab.pickle', "wb")
f.write(pickle.dumps(data))
f.close()

"""# ***Testing***"""

import face_recognition
import imutils
import pickle
import time
import cv2
data = pickle.loads(open("/content/drive/My Drive/My Project/Face Recognition/output/lab.pickle", "rb").read())
stream = cv2.VideoCapture("/content/drive/My Drive/My Project/Face Recognition/input.mp4")
writer = None
while True:
	(grabbed, frame) = stream.read()
	if not grabbed:
		break
	rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
	rgb = imutils.resize(frame, width=750)
	r = frame.shape[1] / float(rgb.shape[1])
	boxes = face_recognition.face_locations(rgb,model="cnn")
	encodings = face_recognition.face_encodings(rgb, boxes)
	names = []
	for encoding in encodings:
		matches = face_recognition.compare_faces(data["encodings"],encoding)
		name = "Unknown"
		if True in matches:
			matchedIdxs = [i for (i, b) in enumerate(matches) if b]
			counts = {}
			for i in matchedIdxs:
				name = data["names"][i]
				counts[name] = counts.get(name, 0) + 1

			name = max(counts, key=counts.get)
		names.append(name)

	for ((top, right, bottom, left), name) in zip(boxes, names):
		top = int(top * r)
		right = int(right * r)
		bottom = int(bottom * r)
		left = int(left * r)

		cv2.rectangle(frame, (left, top), (right, bottom),
			(0, 255, 0), 2)
		y = top - 15 if top - 15 > 15 else top + 15
		cv2.putText(frame, name, (left, y), cv2.FONT_HERSHEY_SIMPLEX,
			0.75, (0, 255, 0), 2)

	if writer is None:
		fourcc = cv2.VideoWriter_fourcc(*"MJPG")
		writer = cv2.VideoWriter("/content/drive/My Drive/My Project/Face Recognition/output.avi", fourcc, 24,
			(frame.shape[1], frame.shape[0]), True)
	writer.write(frame)
	key = cv2.waitKey(1) & 0xFF
	if key == ord("q"):
		break
stream.release()
if writer is not None:
	writer.release()

